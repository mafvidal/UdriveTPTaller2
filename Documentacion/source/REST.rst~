.. _REST:

API REST
========

En todos los mensajes, si el usuario en la url, no existe, el servidor enviara el siguiente mensaje:

.. code-block:: json

	{
		"Estado" : "ERROR",
		"Mensaje" : "El usuario no existe"
	}

Si la URL no es correcta, el servidor enviara el siguiente mensaje:

.. code-block:: json

	{
		"Estado" : "ERROR",
		"Mensaje" : "URL incorrecta"
	}

API REST Usuarios
-----------------

* :ref:`Usuarios <RAUsuarios>`

API REST Archivos logicos
-------------------------

* :ref:`Archivos logicos <RAArchivoslogicos>`

API REST Archivos Fisicos
-------------------------

* :ref:`Archivos Fisicos <DocProyecto>`

API REST Busquedas
------------------

* :ref:`Busquedas <RABusquedas>`



Buscar por metadato
+++++++++++++++++++

Buscar por etiquetas
--------------------

Permite buscar los archivos por una determinada etiqueta

**URL**: /usuarios/nombreUsuario/archivos/etiquetas/nombreDeLaEtiqueta

**TIPO**: GET

Buscar por propietario
----------------------

Permite buscar los archivos que pertenecen al propietario indicado

**URL**: /usuarios/nombreUsuario/archivos/propietario/nombreDelPropietario

**TIPO**: GET

Buscar por nombre
-----------------

Permite buscar los archivos que poseen el nombre indicado

**URL**: /usuarios/nombreUsuario/archivos/nombre/nombreDelArchivo

**TIPO**: GET

Buscar por extension
--------------------

Permite buscar los archivos que poseen extension indicada

**URL**: /usuarios/nombreUsuario/archivos/nombre/extensionDelArchivo

**TIPO**: GET

*Para todas las busquedas por metadatos la salida es la siguiente*
------------------------------------------------------------------

**Salida**:

.. code-block:: json

	{
		"Archivos": [
			{
				"Directorio": "/documentos/mae/",
				"Etiquetas": ["Rojo","Azul","Colores"],
				"Extension": "pdf",
				"FechaDeModificacion": "11/12/15 02:35:32 PM",
				"ID": "4106985908",
				"Nombre": "tp",
				"Propietario": "pepe1",
				"UsuarioQueModifico": "pepe1",
				"Version": 0
			}
		],
		"Estado": "OK"
	}

Agregar archivo (Fisicamente)
+++++++++++++++++++++++++++++

Permite agregar un archivo fisicamente, la URL debe incluir la ID recibida al crear el archivo.

**URL**: /usuarios/nombreUsuario/archivofisico/IDArchivo

**TIPO**: POST

**BODY**:

Archivo a guardar

**Salida**:

*Si se guardo el archivo exitosamente*:

.. code-block:: json

	{
		"Estado": "OK",
		"Mensaje": "Archivo creado correctamente"
	}

*Si la ID no pertenece a un archivo*:

.. code-block:: json

	{
		"Estado": "ERROR",
		"Mensaje": "El archivo no existe"
	}

Actualizar archivo (fisicamente)
++++++++++++++++++++++++++++++++

Permite actuaizar un archivo fisicamente, la URL debe incluir la ID recibida al actualizar el archivo.

**URL**: /usuarios/nombreUsuario/archivofisico/IDArchivo

**TIPO**: PUT

**BODY**:

Archivo a actualizar

**Salida**:

*Si se guardo el archivo exitosamente*:

.. code-block:: json

	{
		"Estado": "OK",
		"Mensaje": "Archivo creado correctamente"
	}

*Si la ID no pertenece a un archivo*:

.. code-block:: json

	{
		"Estado": "ERROR",
		"Mensaje": "El archivo no existe"
	}

Descargar archivo (fisicamente)
+++++++++++++++++++++++++++++++

Permite al usuario descargar un determinado archivo.

**URL**: /usuarios/nombreUsuario/archivofisico/IDArchivo/

**TIPO**: GET

**Salida**:

*Si el archivo existe*:

* El archivo fisico.

*Si el archivo no existe*:

.. code-block:: json

	{
		"Estado": "ERROR",
		"Mensaje": "El archivo no se pudo abrir"
	}

Descargar version del archivo (fisicamente)
+++++++++++++++++++++++++++++++++++++++++++

Permite al usuario descargar un determinado archivo.

**URL**: /usuarios/nombreUsuario/archivofisico/IDArchivo/NumeroDeVersion

**TIPO**: GET

**Salida**:

*Si el archivo existe*:

* El archivo fisico.

*Si la version no existe*:

* retorna la version actual del archivo.

*Si el archivo no existe*:

.. code-block:: json

	{
		"Estado": "ERROR",
		"Mensaje": "El archivo no se pudo abrir"
	}


Subir foto del usuario (fisicamente)
++++++++++++++++++++++++++++++++++++

Permite al usuario subir su foto.

**URL**: /usuarios/nombreUsuario/foto

**TIPO**: POST

**BODY**:

* Foto del usuario

**Salida**:

*Si se guardo la foto exitosamente*:

.. code-block:: json

	{
		"Estado": "OK",
		"Mensaje": "Archivo creado correctamente"
	}

*Si el usuario no existe*:

.. code-block:: json

	{
		"Estado": "ERROR",
		"Mensaje": "El usuario no existe"
	}

Descargar foto del usuario (fisicamente)
++++++++++++++++++++++++++++++++++++++++

Permite al usuario descargar su foto.

**URL**: /usuarios/nombreUsuario/foto

**TIPO**: GET

**Salida**:

*Si la foto existe*:

* La foto del usuario.

*Si el usuario no guardo una foto*:

.. code-block:: json

	{
		"Estado": "ERROR",
		"Mensaje": "El archivo no existe"
	}



|
|
| :ref:`Volver a la pagina anterior <DocTecnica>`
| :ref:`Volver a la pagina principal <index>`


